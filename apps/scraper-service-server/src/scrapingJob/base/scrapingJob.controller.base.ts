/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScrapingJobService } from "../scrapingJob.service";
import { ScrapingJobCreateInput } from "./ScrapingJobCreateInput";
import { ScrapingJob } from "./ScrapingJob";
import { ScrapingJobFindManyArgs } from "./ScrapingJobFindManyArgs";
import { ScrapingJobWhereUniqueInput } from "./ScrapingJobWhereUniqueInput";
import { ScrapingJobUpdateInput } from "./ScrapingJobUpdateInput";

export class ScrapingJobControllerBase {
  constructor(protected readonly service: ScrapingJobService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScrapingJob })
  async createScrapingJob(
    @common.Body() data: ScrapingJobCreateInput
  ): Promise<ScrapingJob> {
    return await this.service.createScrapingJob({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScrapingJob] })
  @ApiNestedQuery(ScrapingJobFindManyArgs)
  async scrapingJobs(@common.Req() request: Request): Promise<ScrapingJob[]> {
    const args = plainToClass(ScrapingJobFindManyArgs, request.query);
    return this.service.scrapingJobs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScrapingJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scrapingJob(
    @common.Param() params: ScrapingJobWhereUniqueInput
  ): Promise<ScrapingJob | null> {
    const result = await this.service.scrapingJob({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScrapingJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScrapingJob(
    @common.Param() params: ScrapingJobWhereUniqueInput,
    @common.Body() data: ScrapingJobUpdateInput
  ): Promise<ScrapingJob | null> {
    try {
      return await this.service.updateScrapingJob({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScrapingJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScrapingJob(
    @common.Param() params: ScrapingJobWhereUniqueInput
  ): Promise<ScrapingJob | null> {
    try {
      return await this.service.deleteScrapingJob({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
