/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ScrapingJob as PrismaScrapingJob } from "@prisma/client";

export class ScrapingJobServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScrapingJobCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scrapingJob.count(args);
  }

  async scrapingJobs<T extends Prisma.ScrapingJobFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapingJobFindManyArgs>
  ): Promise<PrismaScrapingJob[]> {
    return this.prisma.scrapingJob.findMany<Prisma.ScrapingJobFindManyArgs>(
      args
    );
  }
  async scrapingJob<T extends Prisma.ScrapingJobFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapingJobFindUniqueArgs>
  ): Promise<PrismaScrapingJob | null> {
    return this.prisma.scrapingJob.findUnique(args);
  }
  async createScrapingJob<T extends Prisma.ScrapingJobCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapingJobCreateArgs>
  ): Promise<PrismaScrapingJob> {
    return this.prisma.scrapingJob.create<T>(args);
  }
  async updateScrapingJob<T extends Prisma.ScrapingJobUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapingJobUpdateArgs>
  ): Promise<PrismaScrapingJob> {
    return this.prisma.scrapingJob.update<T>(args);
  }
  async deleteScrapingJob<T extends Prisma.ScrapingJobDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapingJobDeleteArgs>
  ): Promise<PrismaScrapingJob> {
    return this.prisma.scrapingJob.delete(args);
  }
}
